testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("()-", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity", colnames(x))
#colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
#colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("()-", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity", colnames(x))
#colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
#colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
View(testtrainingset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("()-", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
#colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
#colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("()", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
#colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
#colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
#colnames(x) <- gsub("()", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
#colnames(x) <- gsub("fBody", "freq.Body", colnames(x))
#colnames(x) <- gsub("tBody", "time.Body", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
colClean <- function(x){
#colnames(x) <- gsub("()", ".", colnames(x))
colnames(x) <- gsub("mean()", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", ".X", colnames(x))
colnames(x) <- gsub("-Y", ".Y", colnames(x))
colnames(x) <- gsub("-Z", ".Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", ".X", colnames(x))
colnames(x) <- gsub("-Y", ".Y", colnames(x))
colnames(x) <- gsub("-Z", ".Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", ".X", colnames(x))
colnames(x) <- gsub("-Y", ".Y", colnames(x))
colnames(x) <- gsub("-Z", ".Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
View(testtrainingset)
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", "X", colnames(x))
colnames(x) <- gsub("-Y", "Y", colnames(x))
colnames(x) <- gsub("-Z", "Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
colnames(x) <- gsub("[-]", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
View(testtrainingset)
tidydataset <- testtrainingset %>%
group_by(subject, activityname.str) %>%
summarise(avg = avg(colnames(testtrainingset)))
View(testtrainingset)
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise(avg = avg(colnames(testtrainingset)))
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise(avg = mean(colnames(testtrainingset)))
View(tidydataset)
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise_all(mean)
View(tidydataset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
#install.packages("plyr")
library(plyr)
#install.packages("dplyr")
library(dplyr)
zipfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(zipfile, tf <- tempfile(fileext = ".zip"))
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
#head(activitylabels)
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", "X", colnames(x))
colnames(x) <- gsub("-Y", "Y", colnames(x))
colnames(x) <- gsub("-Z", "Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
colnames(x) <- gsub("[-]", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
testtrainingset <- testtrainingset[, !(colnames(testtrainingset) %in% c("activity"))]
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise_all(mean)
View(tidydataset)
View(tidydataset)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
myMatrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
Mymatrix$get()
myMatrix$get()
myMatrix$getInverse()
cacheSolve(myMatrix)
cacheSolve(myMatrix)
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RprogramWeek4/rankall.txt', encoding = 'UTF-8')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/RProgramming/cachematrix.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
#install.packages("plyr")
library(plyr)
#install.packages("dplyr")
library(dplyr)
zipfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(zipfile, tf <- tempfile(fileext = ".zip"))
unzip(tf, exdir = td <- file.path(tempdir(), "myzip"))
## create df with column labels from features.txt file.
colLabels <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/features.txt"), header= FALSE)
#make dframes out of necessary txt files
x_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/X_test.txt"))
x_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/X_train.txt"))
y_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/y_test.txt"),  col.names=c("activity"))
y_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/y_train.txt"),  col.names=c("activity"))
subject_testdata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/test/subject_test.txt"), col.names=c("Subject"))
subject_traindata <- read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/train/subject_train.txt"), col.names=c("Subject"))
#use colLabels df to label columns in x test data before binding columns
names = ((colLabels[,2]))
colnames(x_testdata) = names
colnames(x_traindata) = names
testdata <- cbind(subject_testdata, y_testdata, x_testdata) #subject_testdata,
traindata <-cbind(subject_traindata, y_traindata, x_traindata)
dataset <- rbind(testdata, traindata)
testtrainingset <- dataset[, grep("Subject|activity|Mean|std", names(dataset), ignore.case=TRUE)]
activitylabels <-read.table(file.path(tempdir(), "/myzip/UCI HAR Dataset/activity_labels.txt"))
testtrainingset$activityname.str <- activitylabels$V2[match(testtrainingset$activity, activitylabels$V1)]
colClean <- function(x){
colnames(x) <- gsub("[()]", "", colnames(x))
colnames(x) <- gsub("mean", "mean.", colnames(x))
colnames(x) <- gsub("std", "std.", colnames(x))
colnames(x) <- gsub("fBody", "freq.Body.", colnames(x))
colnames(x) <- gsub("tBody", "time.Body.", colnames(x))
#colnames(x) <- gsub("fGravity", "freq.Gravity", colnames(x))
colnames(x) <- gsub("tGravity", "time.Gravity.", colnames(x))
colnames(x) <- gsub("-X", "X", colnames(x))
colnames(x) <- gsub("-Y", "Y", colnames(x))
colnames(x) <- gsub("-Z", "Z", colnames(x))
#colnames(x) <- gsub("-", ".", colnames(x))
colnames(x) <- gsub("[-]", ".", colnames(x))
x }
testtrainingset <- colClean(testtrainingset)
testtrainingset <- testtrainingset[, !(colnames(testtrainingset) %in% c("activity"))]
tidydataset <- testtrainingset %>%
group_by(Subject, activityname.str) %>%
summarise_all(mean)
View(tidydataset)
library(dataMaid)
install.packages(c("curl", "digest", "openssl", "RCurl", "stringi", "stringr", "withr", "yaml"))
install.packages("dataMaid")
library("dataMaid", lib.loc="~/R/win-library/3.4")
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/GettingCleaningScript.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/run_analysis.R')
unlink('C:/RPrograms/GettingCleaningProject/GettingCleaningData/CodeBook_cache', recursive = TRUE)
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/run_analysis.R')
source('C:/RPrograms/GettingCleaningProject/GettingCleaningData/run_analysis.R')
s <- ggplot(completedata, aes(x=interval, y=steps, color = weekend)) +
geom_line() +
facet_wrap(~weekend, ncol = 1, nrow=2)
library(ggplot2)
s <- ggplot(completedata, aes(x=interval, y=steps, color = weekend)) +
geom_line() +
facet_wrap(~weekend, ncol = 1, nrow=2)
s
completedata$weekend <- grepl("S.+", weekdays(as.Date(completedata$date)))
#panel plot of weekend v weekday data
#plot graphs in 2x2 panel
par(mfrow = c(2,1), mar=c(0, 4, 1, 1) + 0.1)#it goes c(bottom, left, top, right)
weekenddata <- subset(completedata, weekend == TRUE)
weekendintervalsteps <- aggregate(weekenddata$steps, by=list(weekenddata$interval)
, mean, na.action=na.omit)
weekdaydata <- subset(completedata, weekend == FALSE)
weekdayintervalsteps <- aggregate(weekdaydata$steps, by=list(weekdaydata$interval)
, mean, na.action=na.omit)
ggplot(completedata, aes(x=interval, y=steps, color = weekend)) +
geom_line() +
facet_wrap(~weekend, ncol = 1, nrow=2)
#create plot a
plot.ts(weekendintervalsteps$Group.1, weekendintervalsteps$x, type="l",  main="Weekend", ylab="", xlab="", xaxt='n')
#create plot b
plot.ts(weekdayintervalsteps$Group.1, weekdayintervalsteps$x, type="l",  main="Weekday", ylab="", xlab="", xlim=c(0,2000))
par("mar")
par(mar=c(3,4,4,1)+0.1)
source('C:/RPrograms/ReproducibleResearch/ReproducibleResearch/FinalProject/ReproducibleResearch/FinalProject/WeatherServiceReport.R')
#Analysis of NOAA Data to Visualize Differences in Population Health and Economics by Weather Event Types
###Synopsis: Raw data collected by NOAA provides event based data for every storm event in the United States for over 50 years.
###Loading and preprocessing the data
library(ggplot2)
library(dplyr)
library(knitr)
###set working dir
setwd("C:\\RPrograms\\ReproducibleResearch\\ReproducibleResearch\\FinalProject\\ReproducibleResearch\\FinalProject")
###download and unzip raw data from website
datafile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(datafile, tf <- tempfile(fileext = ".bz2"))
###read csv data and create rawdata dataframe
rawdata <- read.csv(tf)
###Create tidydata as a subset of the rawdata
tidydata <- rawdata[, c(1,2,7,8, 23,24,25,26,27,28)]
###add column to sum fatalities and injury number
tidydata$death_injury <- as.numeric(as.character(tidydata$FATALITIES))+as.numeric(as.character(tidydata$INJURIES))
###create a vector to hold and allow for conversion of exp coding
exponent_Finance <- tidydata$PROPDMGEXP
exp_value <- sapply(exponent_Finance, function(x)  if (x=='K') {1000} else if (x=='M') {1000000} else if (x=='H') {100} else if (x=='B') {1000000000} else {0})
###create a vector to hold and allow for conversion of exp coding
exponent_Crop <- tidydata$CROPDMGEXP
exp_crop <- sapply(exponent_Crop, function(x) if (x=='K') {1000} else if (x=='M') {1000000} else if (x=='H') {100} else if (x=='B') {1000000000} else {0})
###bind new columns to tidydata set containing number value for alpha label
tidydata <- cbind(tidydata,exp_value, exp_crop)
###add column that calculates property and crop damage in $
tidydata$economic <- (as.numeric(as.character(tidydata$PROPDMG))*as.numeric(as.character(tidydata$exp_value)) + as.numeric(as.character(tidydata$CROPDMG))*as.numeric(as.character(tidydata$exp_crop)))
summaryEconData <- aggregate(cbind(tidydata$EVTYPE, tidydata$death_injury, tidydata$economic), by=list(tidydata$EVTYPE), FUN=sum, na.rm=TRUE, na.action=NULL)
#summarydata <- tidydata[order(-tidydata$economic), ]
colnames(summaryEconData) <- c("Event", "Death_Injury", "Economic")
summaryEconData <- summaryEconData[order(-summaryEconData$Death_Injury), ]
head(summaryEconData)
###plot graph
ggplot(data=head(summaryEconData), aes(x=Event, y=Death_Injury)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme( axis.ticks.x=element_blank())
ggplot(data=tidydata, aes(x=EVTYPE, y=economic)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme(axis.text.x=element_blank())
###set working dir
setwd("C:\\RPrograms\\ReproducibleResearch\\ReproducibleResearch\\FinalProject\\ReproducibleResearch\\FinalProject")
###download and unzip raw data from website
datafile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(datafile, tf <- tempfile(fileext = ".bz2"))
###download and unzip raw data from website
datafile <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(datafile, tf <- tempfile(fileext = ".bz2"))
download.file(datafile, tf <- tempfile(fileext = ".bz2"))
###read csv data and create rawdata dataframe
rawdata <- read.csv(tf)
###Create tidydata as a subset of the rawdata
tidydata <- rawdata[, c(1,2,7,8, 23,24,25,26,27,28)]
###add column to sum fatalities and injury number
tidydata$death_injury <- as.numeric(as.character(tidydata$FATALITIES))+as.numeric(as.character(tidydata$INJURIES))
###create a vector to hold and allow for conversion of exp coding
exponent_Finance <- tidydata$PROPDMGEXP
exp_value <- sapply(exponent_Finance, function(x)  if (x=='K') {1000} else if (x=='M') {1000000} else if (x=='H') {100} else if (x=='B') {1000000000} else {0})
###create a vector to hold and allow for conversion of exp coding
exponent_Crop <- tidydata$CROPDMGEXP
exp_crop <- sapply(exponent_Crop, function(x) if (x=='K') {1000} else if (x=='M') {1000000} else if (x=='H') {100} else if (x=='B') {1000000000} else {0})
###bind new columns to tidydata set containing number value for alpha label
tidydata <- cbind(tidydata,exp_value, exp_crop)
###add column that calculates property and crop damage in $
tidydata$economic <- (as.numeric(as.character(tidydata$PROPDMG))*as.numeric(as.character(tidydata$exp_value)) + as.numeric(as.character(tidydata$CROPDMG))*as.numeric(as.character(tidydata$exp_crop)))
summaryEconData <- aggregate(cbind(tidydata$EVTYPE, tidydata$death_injury, tidydata$economic), by=list(tidydata$EVTYPE), FUN=sum, na.rm=TRUE, na.action=NULL)
colnames(summaryEconData) <- c("Event", "Death_Injury", "Economic")
summaryEconData <- summaryEconData[order(-summaryEconData$Death_Injury), ]
head(summaryEconData)
###plot graph
ggplot(data=head(summaryEconData), aes(x=Event, y=Death_Injury)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme( axis.ticks.x=element_blank())
summaryEconData <- summaryEconData[order(-summaryEconData$Economic), ]
head(summaryEconData)
ggplot(data=head(summaryEconData), aes(x=Event, y=Economic)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme(axis.text.x=element_blank())
ggplot(data=head(summaryEconData), aes(x=Event, y=Economic)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme(axis.ticks.x=element_blank())
summaryEconData <- summaryEconData[order(-summaryEconData$Death_Injury), ]
head(summaryEconData)
###plot graph
ggplot(data=head(summaryEconData,10), aes(x=Event, y=Death_Injury)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme( axis.ticks.x=element_blank())
summaryEconData <- summaryEconData[order(-summaryEconData$Economic), ]
head(summaryEconData)
ggplot(data=head(summaryEconData,10), aes(x=Event, y=Economic)) +
stat_summary(fun.y=sum, geom="bar", color = "black", size=1) +
theme(axis.ticks.x=element_blank())
source('C:/RPrograms/ReproducibleResearch/ReproducibleResearch/FinalProject/ReproducibleResearch/FinalProject/WeatherServiceReport.R')
View(tidydata)
